// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.etshost.msu.entity;

import com.etshost.msu.entity.AuthenticationRecord;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect AuthenticationRecord_Roo_Finder {
    
    public static Long AuthenticationRecord.countFindAuthenticationRecordsByIpAddressEquals(String ipAddress) {
        if (ipAddress == null || ipAddress.length() == 0) throw new IllegalArgumentException("The ipAddress argument is required");
        EntityManager em = AuthenticationRecord.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM AuthenticationRecord AS o WHERE o.ipAddress = :ipAddress", Long.class);
        q.setParameter("ipAddress", ipAddress);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<AuthenticationRecord> AuthenticationRecord.findAuthenticationRecordsByIpAddressEquals(String ipAddress) {
        if (ipAddress == null || ipAddress.length() == 0) throw new IllegalArgumentException("The ipAddress argument is required");
        EntityManager em = AuthenticationRecord.entityManager();
        TypedQuery<AuthenticationRecord> q = em.createQuery("SELECT o FROM AuthenticationRecord AS o WHERE o.ipAddress = :ipAddress", AuthenticationRecord.class);
        q.setParameter("ipAddress", ipAddress);
        return q;
    }
    
    public static TypedQuery<AuthenticationRecord> AuthenticationRecord.findAuthenticationRecordsByIpAddressEquals(String ipAddress, String sortFieldName, String sortOrder) {
        if (ipAddress == null || ipAddress.length() == 0) throw new IllegalArgumentException("The ipAddress argument is required");
        EntityManager em = AuthenticationRecord.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM AuthenticationRecord AS o WHERE o.ipAddress = :ipAddress");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<AuthenticationRecord> q = em.createQuery(queryBuilder.toString(), AuthenticationRecord.class);
        q.setParameter("ipAddress", ipAddress);
        return q;
    }
    
}
