// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.etshost.msu.entity;

import com.etshost.msu.entity.PasswordResetToken;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect PasswordResetToken_Roo_Finder {
    
    public static Long PasswordResetToken.countFindPasswordResetTokensByTokenEquals(String token) {
        if (token == null || token.length() == 0) throw new IllegalArgumentException("The token argument is required");
        EntityManager em = PasswordResetToken.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM PasswordResetToken AS o WHERE o.token = :token", Long.class);
        q.setParameter("token", token);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<PasswordResetToken> PasswordResetToken.findPasswordResetTokensByTokenEquals(String token) {
        if (token == null || token.length() == 0) throw new IllegalArgumentException("The token argument is required");
        EntityManager em = PasswordResetToken.entityManager();
        TypedQuery<PasswordResetToken> q = em.createQuery("SELECT o FROM PasswordResetToken AS o WHERE o.token = :token", PasswordResetToken.class);
        q.setParameter("token", token);
        return q;
    }
    
    public static TypedQuery<PasswordResetToken> PasswordResetToken.findPasswordResetTokensByTokenEquals(String token, String sortFieldName, String sortOrder) {
        if (token == null || token.length() == 0) throw new IllegalArgumentException("The token argument is required");
        EntityManager em = PasswordResetToken.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM PasswordResetToken AS o WHERE o.token = :token");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<PasswordResetToken> q = em.createQuery(queryBuilder.toString(), PasswordResetToken.class);
        q.setParameter("token", token);
        return q;
    }
    
}
