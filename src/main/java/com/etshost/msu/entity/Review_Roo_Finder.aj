// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.etshost.msu.entity;

import com.etshost.msu.entity.Review;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Review_Roo_Finder {
    
    public static Long Review.countFindReviewsByTextLike(String text) {
        if (text == null || text.length() == 0) throw new IllegalArgumentException("The text argument is required");
        text = text.replace('*', '%');
        if (text.charAt(0) != '%') {
            text = "%" + text;
        }
        if (text.charAt(text.length() - 1) != '%') {
            text = text + "%";
        }
        EntityManager em = Review.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Review AS o WHERE LOWER(o.text) LIKE LOWER(:text)", Long.class);
        q.setParameter("text", text);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<Review> Review.findReviewsByTextLike(String text) {
        if (text == null || text.length() == 0) throw new IllegalArgumentException("The text argument is required");
        text = text.replace('*', '%');
        if (text.charAt(0) != '%') {
            text = "%" + text;
        }
        if (text.charAt(text.length() - 1) != '%') {
            text = text + "%";
        }
        EntityManager em = Review.entityManager();
        TypedQuery<Review> q = em.createQuery("SELECT o FROM Review AS o WHERE LOWER(o.text) LIKE LOWER(:text)", Review.class);
        q.setParameter("text", text);
        return q;
    }
    
    public static TypedQuery<Review> Review.findReviewsByTextLike(String text, String sortFieldName, String sortOrder) {
        if (text == null || text.length() == 0) throw new IllegalArgumentException("The text argument is required");
        text = text.replace('*', '%');
        if (text.charAt(0) != '%') {
            text = "%" + text;
        }
        if (text.charAt(text.length() - 1) != '%') {
            text = text + "%";
        }
        EntityManager em = Review.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Review AS o WHERE LOWER(o.text) LIKE LOWER(:text)");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Review> q = em.createQuery(queryBuilder.toString(), Review.class);
        q.setParameter("text", text);
        return q;
    }
    
}
