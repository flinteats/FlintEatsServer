// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.etshost.msu.entity;

import com.etshost.msu.entity.Status;
import com.etshost.msu.entity.Tip;
import com.etshost.msu.entity.Tip.TipType;
import com.etshost.msu.entity.TipDataOnDemand;
import com.etshost.msu.entity.UserDataOnDemand;
import java.security.SecureRandom;
import java.time.Instant;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect TipDataOnDemand_Roo_DataOnDemand {
    
    declare @type: TipDataOnDemand: @Component;
    
    private Random TipDataOnDemand.rnd = new SecureRandom();
    
    private List<Tip> TipDataOnDemand.data;
    
    @Autowired
    UserDataOnDemand TipDataOnDemand.userDataOnDemand;
    
    public Tip TipDataOnDemand.getNewTransientTip(int index) {
        Tip obj = new Tip();
        setCreated(obj, index);
        setModified(obj, index);
        setStatus(obj, index);
        setText(obj, index);
        setTipType(obj, index);
        return obj;
    }
    
    public void TipDataOnDemand.setCreated(Tip obj, int index) {
        Instant created = null;
        obj.setCreated(created);
    }
    
    public void TipDataOnDemand.setModified(Tip obj, int index) {
        Instant modified = null;
        obj.setModified(modified);
    }
    
    public void TipDataOnDemand.setStatus(Tip obj, int index) {
        Status status = Status.class.getEnumConstants()[0];
        obj.setStatus(status);
    }
    
    public void TipDataOnDemand.setText(Tip obj, int index) {
        String text = "text_" + index;
        obj.setText(text);
    }
    
    public void TipDataOnDemand.setTipType(Tip obj, int index) {
        TipType tipType = TipType.class.getEnumConstants()[0];
        obj.setTipType(tipType);
    }
    
    public Tip TipDataOnDemand.getSpecificTip(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Tip obj = data.get(index);
        Long id = obj.getId();
        return Tip.findTip(id);
    }
    
    public Tip TipDataOnDemand.getRandomTip() {
        init();
        Tip obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Tip.findTip(id);
    }
    
    public boolean TipDataOnDemand.modifyTip(Tip obj) {
        return false;
    }
    
    public void TipDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Tip.findTipEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Tip' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Tip>();
        for (int i = 0; i < 10; i++) {
            Tip obj = getNewTransientTip(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
